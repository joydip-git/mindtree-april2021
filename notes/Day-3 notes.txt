1. complete the assignment given
2. modify: use modular code (only in Node-app using Common JS format)
   a. create 3 files each for employee, developer and hr (employee.js, developer.js, hr.js) and export the classes from each file
   b. create another file where only the array (blank) will be present (resposiroty.js) and export the array
   c. create another file (main/index.js) with 
      i. object creation code (import the classes)
      ii. pushing the objects in that array (import the array)
      iii. iterate through the array and display the salary of every employee with their name
   d. run the main.js in Node

3. transpiler: transpile code 
	a. TS and Typescript transpiler
	b. Js and Babel transpiler
4. packages and package.json
5. bundling the application: webpack
   a. bundlers
6. host our app through a server (dev server) - webpackdevserver, lite-server

a. code
b. app set up

  
  in JS there is no concept of module
  also, browser actually do not have module concept
  Broswer/web app <-------------- JavaScript ---------------------> Node JS

  1. Module: a JS file

  How to define a module and export module members from one file and import those members in another file?
	answer: decided by a module format

 2. formats for module:
	a. Common JS format (Node JS uses this)
		i. exporting something from one file: module object with exports property 
 		ii. importing something from other file: require() method
	b. Asynchronous Module Definition format (AMD)
	c. Universal Module Definition format (UMD)
	d. ES6 module format (import/export)
	e. IIFE (Immediately Invocable Function Expression)

  Node JS brought concept of module in JS 
  Node JS supports Common JS format of module (by default)
  Node JS has a Common JS module loader which resolves the dependencies amongst the files

  3. module loader:
	a. require js
	b. systemjs

  ECMAScript (ES)
  JS and TS and NS

	module:
	---------------
	a. import (dependencies)
	b. code
	c. export 

	Browser runtime has NO MODULE concept and no module loader
	require js module loader does not understand CommonJS or any other format
	require js module loader expects the modules to be in AMD module format

Problems:
	1. browser module loader (require.js) is unable to interpret the ES6/CommonJS module formats. It is expecting AMD module format code.
        solution: convert CommonJS/ES6 code to AMD format
	[use babel and use this plugin: @babel/plugin-transform-modules-amd]

	2. not sure whether older browsers will be able to compile and execute the new styles JS code
	solution: convert your ES6/7/... higer version code into lower version (<=ES5) [use babel and this preset: @babel/preset-env]

	How to do both of the above??????
	answer: use a transpiler to solve both the problems:

	which language: TS/JS???
	JS -- Babel transpiler
	TS -- typescript transpiler

	Babel Transpiler:
	core package: @babel/core
	CLI package: @babel/cli

	const --> const-transformer/const-plugin --> var

	let --> let-transformer/let-plugin --> var
	[@babel/plugin-transform-block-scoping]

	()=>{} --> arrow-transformer/arrow-plugin --> function(){}
	[@babel/plugin-transform-arrow-functions]
	..................................

	presets: array of certain plugins
	@babel/preset-env: majority of ES-X new features related plugins
	[pl1,pl2,pl3,....,pln]

	const num:Number = 10;
	const num = 10;

	a. Compile type checking
	b. Nice typification

	TS code--> JS Code (old style)
	ES6 modules --> AMD



        

 




  
